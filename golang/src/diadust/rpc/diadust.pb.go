// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diadust.proto

package diadust

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FilterOrderType int32

const (
	FilterOrderType_CREATED    FilterOrderType = 0
	FilterOrderType_SIZE       FilterOrderType = 1
	FilterOrderType_RESOLUTION FilterOrderType = 2
)

var FilterOrderType_name = map[int32]string{
	0: "CREATED",
	1: "SIZE",
	2: "RESOLUTION",
}
var FilterOrderType_value = map[string]int32{
	"CREATED":    0,
	"SIZE":       1,
	"RESOLUTION": 2,
}

func (x FilterOrderType) String() string {
	return proto.EnumName(FilterOrderType_name, int32(x))
}
func (FilterOrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_diadust_9eeacf44d153c077, []int{0}
}

type FilterOrder int32

const (
	FilterOrder_DESC FilterOrder = 0
	FilterOrder_ASC  FilterOrder = 1
)

var FilterOrder_name = map[int32]string{
	0: "DESC",
	1: "ASC",
}
var FilterOrder_value = map[string]int32{
	"DESC": 0,
	"ASC":  1,
}

func (x FilterOrder) String() string {
	return proto.EnumName(FilterOrder_name, int32(x))
}
func (FilterOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_diadust_9eeacf44d153c077, []int{1}
}

// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
// Models
// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
type Image struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	OriginalName         string   `protobuf:"bytes,3,opt,name=original_name,json=originalName" json:"original_name,omitempty"`
	Path                 string   `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Tag                  []int32  `protobuf:"varint,5,rep,packed,name=tag" json:"tag,omitempty"`
	Created              int32    `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_diadust_9eeacf44d153c077, []int{0}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (dst *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(dst, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Image) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Image) GetOriginalName() string {
	if m != nil {
		return m.OriginalName
	}
	return ""
}

func (m *Image) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Image) GetTag() []int32 {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *Image) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

type ImageHash struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageHash) Reset()         { *m = ImageHash{} }
func (m *ImageHash) String() string { return proto.CompactTextString(m) }
func (*ImageHash) ProtoMessage()    {}
func (*ImageHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_diadust_9eeacf44d153c077, []int{1}
}
func (m *ImageHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageHash.Unmarshal(m, b)
}
func (m *ImageHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageHash.Marshal(b, m, deterministic)
}
func (dst *ImageHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageHash.Merge(dst, src)
}
func (m *ImageHash) XXX_Size() int {
	return xxx_messageInfo_ImageHash.Size(m)
}
func (m *ImageHash) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageHash.DiscardUnknown(m)
}

var xxx_messageInfo_ImageHash proto.InternalMessageInfo

func (m *ImageHash) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ImageHash) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type Tag struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_diadust_9eeacf44d153c077, []int{2}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (dst *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(dst, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
// Types
// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
type Filter struct {
	Name                 []string        `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	NoName               []string        `protobuf:"bytes,2,rep,name=no_name,json=noName" json:"no_name,omitempty"`
	Tag                  []int32         `protobuf:"varint,3,rep,packed,name=tag" json:"tag,omitempty"`
	NoTag                []int32         `protobuf:"varint,4,rep,packed,name=no_tag,json=noTag" json:"no_tag,omitempty"`
	OrderType            FilterOrderType `protobuf:"varint,5,opt,name=order_type,json=orderType,enum=diadust.FilterOrderType" json:"order_type,omitempty"`
	Order                FilterOrder     `protobuf:"varint,6,opt,name=order,enum=diadust.FilterOrder" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_diadust_9eeacf44d153c077, []int{3}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (dst *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(dst, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Filter) GetNoName() []string {
	if m != nil {
		return m.NoName
	}
	return nil
}

func (m *Filter) GetTag() []int32 {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *Filter) GetNoTag() []int32 {
	if m != nil {
		return m.NoTag
	}
	return nil
}

func (m *Filter) GetOrderType() FilterOrderType {
	if m != nil {
		return m.OrderType
	}
	return FilterOrderType_CREATED
}

func (m *Filter) GetOrder() FilterOrder {
	if m != nil {
		return m.Order
	}
	return FilterOrder_DESC
}

func init() {
	proto.RegisterType((*Image)(nil), "diadust.Image")
	proto.RegisterType((*ImageHash)(nil), "diadust.ImageHash")
	proto.RegisterType((*Tag)(nil), "diadust.Tag")
	proto.RegisterType((*Filter)(nil), "diadust.Filter")
	proto.RegisterEnum("diadust.FilterOrderType", FilterOrderType_name, FilterOrderType_value)
	proto.RegisterEnum("diadust.FilterOrder", FilterOrder_name, FilterOrder_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageServiceClient interface {
	FetchImages(ctx context.Context, in *Filter, opts ...grpc.CallOption) (ImageService_FetchImagesClient, error)
}

type imageServiceClient struct {
	cc *grpc.ClientConn
}

func NewImageServiceClient(cc *grpc.ClientConn) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) FetchImages(ctx context.Context, in *Filter, opts ...grpc.CallOption) (ImageService_FetchImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImageService_serviceDesc.Streams[0], "/diadust.ImageService/fetchImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageServiceFetchImagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageService_FetchImagesClient interface {
	Recv() (*Image, error)
	grpc.ClientStream
}

type imageServiceFetchImagesClient struct {
	grpc.ClientStream
}

func (x *imageServiceFetchImagesClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageServiceServer is the server API for ImageService service.
type ImageServiceServer interface {
	FetchImages(*Filter, ImageService_FetchImagesServer) error
}

func RegisterImageServiceServer(s *grpc.Server, srv ImageServiceServer) {
	s.RegisterService(&_ImageService_serviceDesc, srv)
}

func _ImageService_FetchImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceServer).FetchImages(m, &imageServiceFetchImagesServer{stream})
}

type ImageService_FetchImagesServer interface {
	Send(*Image) error
	grpc.ServerStream
}

type imageServiceFetchImagesServer struct {
	grpc.ServerStream
}

func (x *imageServiceFetchImagesServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

var _ImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "diadust.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "fetchImages",
			Handler:       _ImageService_FetchImages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diadust.proto",
}

func init() { proto.RegisterFile("diadust.proto", fileDescriptor_diadust_9eeacf44d153c077) }

var fileDescriptor_diadust_9eeacf44d153c077 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0xce, 0xd2, 0x40,
	0x14, 0xc5, 0x99, 0xfe, 0x95, 0xcb, 0xf7, 0xf5, 0x6b, 0x26, 0x1a, 0x27, 0xae, 0x9a, 0xba, 0xa9,
	0x2c, 0xd0, 0xd4, 0x85, 0x6e, 0x11, 0x6a, 0x24, 0x31, 0x90, 0xb4, 0x75, 0xe3, 0xa6, 0x19, 0xe9,
	0xd8, 0x4e, 0x02, 0x9d, 0xa6, 0x1d, 0x4c, 0x78, 0x0b, 0xdf, 0xc9, 0x17, 0x33, 0x33, 0xb4, 0x68,
	0x08, 0xbb, 0x73, 0xcf, 0x3d, 0x87, 0xf9, 0x71, 0x53, 0x78, 0x2c, 0x39, 0x2d, 0x4f, 0xbd, 0x5c,
	0xb4, 0x9d, 0x90, 0x02, 0xbb, 0xc3, 0x18, 0xfe, 0x46, 0x60, 0x6f, 0x8e, 0xb4, 0x62, 0xd8, 0x03,
	0x83, 0x97, 0x04, 0x05, 0x28, 0xb2, 0x53, 0x83, 0x97, 0x18, 0x83, 0x75, 0x3a, 0xf1, 0x92, 0x18,
	0x01, 0x8a, 0xa6, 0xa9, 0xd6, 0xf8, 0x35, 0x3c, 0x8a, 0x8e, 0x57, 0xbc, 0xa1, 0x87, 0xa2, 0xa1,
	0x47, 0x46, 0x4c, 0xbd, 0x7c, 0x18, 0xcd, 0x2d, 0x3d, 0x32, 0x55, 0x6c, 0xa9, 0xac, 0x89, 0x75,
	0x29, 0x2a, 0x8d, 0x7d, 0x30, 0x25, 0xad, 0x88, 0x1d, 0x98, 0x91, 0x9d, 0x2a, 0x89, 0x09, 0xb8,
	0xfb, 0x8e, 0x51, 0xc9, 0x4a, 0xe2, 0xe8, 0x37, 0xc7, 0x31, 0x7c, 0x0b, 0x53, 0x4d, 0xf4, 0x85,
	0xf6, 0xf5, 0x3d, 0xaa, 0x9a, 0xf6, 0xf5, 0x48, 0xa5, 0x74, 0xf8, 0x06, 0xcc, 0x9c, 0x56, 0xf7,
	0xa2, 0x9a, 0x71, 0x88, 0x2a, 0x1d, 0xfe, 0x41, 0xe0, 0x7c, 0xe6, 0x07, 0xc9, 0xba, 0xeb, 0x1a,
	0x05, 0xe6, 0xb8, 0xc6, 0x2f, 0xc1, 0x6d, 0x44, 0x31, 0xb4, 0x94, 0xed, 0x34, 0x42, 0xff, 0xa7,
	0x81, 0xdf, 0xfc, 0xc7, 0xff, 0x02, 0x9c, 0x46, 0x14, 0xca, 0xb4, 0xb4, 0x69, 0x37, 0x42, 0x41,
	0x7c, 0x00, 0x10, 0x5d, 0xc9, 0xba, 0x42, 0x9e, 0x5b, 0x46, 0xec, 0x00, 0x45, 0x5e, 0x4c, 0x16,
	0xe3, 0xf1, 0x2f, 0x4f, 0xef, 0x54, 0x20, 0x3f, 0xb7, 0x2c, 0x9d, 0x8a, 0x51, 0xe2, 0x39, 0xd8,
	0x7a, 0xd0, 0xd7, 0xf0, 0xe2, 0xe7, 0xf7, 0x3a, 0xe9, 0x25, 0x32, 0xff, 0x08, 0x4f, 0x37, 0xbf,
	0x84, 0x67, 0xe0, 0xae, 0xd2, 0x64, 0x99, 0x27, 0x6b, 0x7f, 0x82, 0x9f, 0x81, 0x95, 0x6d, 0xbe,
	0x27, 0x3e, 0xc2, 0x1e, 0x40, 0x9a, 0x64, 0xbb, 0xaf, 0xdf, 0xf2, 0xcd, 0x6e, 0xeb, 0x1b, 0xf3,
	0x00, 0x66, 0xff, 0x35, 0x55, 0x70, 0x9d, 0x64, 0x2b, 0x7f, 0x82, 0x5d, 0x30, 0x97, 0xd9, 0xca,
	0x47, 0xf1, 0x27, 0x78, 0xd0, 0xd7, 0xcf, 0x58, 0xf7, 0x8b, 0xef, 0x19, 0x8e, 0x61, 0xf6, 0x93,
	0xc9, 0x7d, 0xad, 0xcd, 0x1e, 0x3f, 0xdd, 0x70, 0xbd, 0xf2, 0xae, 0x86, 0x4e, 0x84, 0x93, 0x77,
	0xe8, 0x87, 0xa3, 0x3f, 0xb2, 0xf7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x16, 0xa7, 0xe3, 0x88,
	0x75, 0x02, 0x00, 0x00,
}
